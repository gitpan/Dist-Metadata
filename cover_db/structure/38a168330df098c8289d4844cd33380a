{"subroutine":[[2,"BEGIN"],[3,"BEGIN"],[8,"BEGIN"],[9,"BEGIN"],[10,"BEGIN"],[13,"BEGIN"],[315,"BEGIN"],[55,"new"],[64,"__ANON__"],[76,"dist"],[109,"default_metadata"],[144,"determine_metadata"],[191,"determine_packages"],[223,"load_meta"],[230,"__ANON__"],[234,"__ANON__"],[261,"meta"],[275,"meta_from_struct"],[295,"package_versions"],[321,"__ANON__"]],"statement":[2,2,2,3,3,3,8,8,8,9,9,9,10,10,10,13,13,13,315,315,315,55,58,56,61,64,62,64,66,76,77,78,79,80,81,84,85,88,89,93,95,109,113,144,146,147,150,151,154,159,160,164,191,193,195,195,200,201,202,205,208,209,213,223,225,226,227,230,230,231,234,235,239,244,244,246,247,248,251,261,262,275,276,295,296,298,298,321],"file":"lib/Dist/Metadata.pm","digest":"38a168330df098c8289d4844cd33380a","branch":[[58,{"text":"@_ == 1 ? :"}],[64,{"text":"unless first sub {\n\t$$self{$_};\n}\n, @formats"}],[79,{"text":"if (my $struct = $$self{'struct'}) { }"}],[79,{"text":"elsif (my $dir = $$self{'dir'}) { }"}],[79,{"text":"elsif (my $file = $$self{'file'}) { }"}],[154,{"text":"if defined $val"}],[160,{"text":"if exists $$self{$field}"}],[200,{"text":"unless (@files)"}],[209,{"text":"unless $meta->should_index_package($pack)"}],[230,{"text":"if ($metafile = first(sub {\n\t/^META\\.json$/;\n}\n, @files)) { }"}],[230,{"text":"elsif ($metafile = first(sub {\n\t/^META\\.ya?ml$/;\n}\n, @files)) { }"}],[244,{"text":"unless $meta->provides"}],[244,{"text":"if (not keys %{{} unless $meta->provides;} and $$self{'determine_packages'})"}],[296,{"text":"@_ ? :"}]],"start":{"234":{"__ANON__":[{"pod":null,"subroutine":15,"statement":79,"time":null,"branch":13,"condition":4}]},"295":{"package_versions":[{"pod":null,"subroutine":18,"statement":83,"time":null,"branch":13,"condition":5}]},"2":{"BEGIN":[{"pod":null,"subroutine":null,"statement":null,"time":null,"branch":null,"condition":null}]},"315":{"BEGIN":[{"pod":null,"subroutine":6,"statement":18,"time":null,"branch":null,"condition":null}]},"144":{"determine_metadata":[{"pod":null,"subroutine":11,"statement":43,"time":null,"branch":5,"condition":2}]},"275":{"meta_from_struct":[{"pod":null,"subroutine":17,"statement":81,"time":null,"branch":13,"condition":5}]},"13":{"BEGIN":[{"pod":null,"subroutine":5,"statement":15,"time":null,"branch":null,"condition":null}]},"55":{"new":[{"pod":null,"subroutine":7,"statement":21,"time":null,"branch":null,"condition":null}]},"261":{"meta":[{"pod":null,"subroutine":16,"statement":79,"time":null,"branch":13,"condition":4}]},"3":{"BEGIN":[{"pod":null,"subroutine":1,"statement":3,"time":null,"branch":null,"condition":null}]},"64":{"__ANON__":[{"pod":null,"subroutine":8,"statement":29,"time":null,"branch":2,"condition":null}]},"9":{"BEGIN":[{"pod":null,"subroutine":3,"statement":9,"time":null,"branch":null,"condition":null}]},"230":{"__ANON__":[{"pod":null,"subroutine":14,"statement":79,"time":null,"branch":13,"condition":4}]},"8":{"BEGIN":[{"pod":null,"subroutine":2,"statement":6,"time":null,"branch":null,"condition":null}]},"109":{"default_metadata":[{"pod":null,"subroutine":10,"statement":41,"time":null,"branch":5,"condition":1}]},"191":{"determine_packages":[{"pod":null,"subroutine":12,"statement":52,"time":null,"branch":7,"condition":2}]},"321":{"__ANON__":[{"pod":null,"subroutine":19,"statement":87,"time":null,"branch":14,"condition":5}]},"76":{"dist":[{"pod":null,"subroutine":9,"statement":29,"time":null,"branch":2,"condition":null}]},"10":{"BEGIN":[{"pod":null,"subroutine":4,"statement":12,"time":null,"branch":null,"condition":null}]},"223":{"load_meta":[{"pod":null,"subroutine":13,"statement":63,"time":null,"branch":9,"condition":3}]},"-1":{"__COVER__":[{"pod":null,"subroutine":20,"statement":88,"time":null,"branch":14,"condition":5}]}},"condition":[[77,{"left":"$$self{'dist'}","right":"do {\n\tmy $dist;\nif (my $struct = $$self{'struct'}) {\n\trequire Dist::Metadata::Struct;\n$dist = 'Dist::Metadata::Struct'->new(%$struct);\n}\nelsif (my $dir = $$self{'dir'}) {\n\trequire Dist::Metadata::Dir;\n$dist = 'Dist::Metadata::Dir'->new('dir', $dir);\n}\nelsif (my $file = $$self{'file'}) {\n\trequire Dist::Metadata::Tar;\n$dist = 'Dist::Metadata::Tar'->new('file', $file);\n}\nelse {\n\tcroak('No dist format parameters found!');\n}\u000b;\n$dist\n}","type":"or_3","op":"||="}],[113,{"left":"ref $self","right":"$self","type":"or_3","op":"||"}],[193,{"left":"$meta","right":"$self->meta_from_struct($self->determine_metadata)","type":"or_2","op":"||="}],[244,{"left":"not keys %{{} unless $meta->provides;}","right":"$$self{'determine_packages'}","type":"and_3","op":"and"}],[262,{"left":"$$self{'meta'}","right":"$self->load_meta","type":"or_3","op":"||="}]]}